package main

import (
	"fmt"
	"os"
	"sort"
	"strings"
)

var outFile = "out.go"
var inFile = "data.json"
var outLine string

func main() {
	// convSlice2Map()

	f, err := os.ReadFile(inFile)
	if err != nil {
		panic(fmt.Sprintln("read fail", err))
	}
	strs := strings.Split(string(f), "\n")

	res := []string{}

	for _, str := range strs {
		reKey := getWord(str)
		if reKey != "" {
			res = append(res, reKey)
		}
	}
	sort.Strings(strs)

	lines := `// Unless explicitly stated otherwise all files in this repository are licensed
// under the MIT License.
// This product includes software developed at Guance Cloud (https://www.guance.com/).
// Copyright 2021-present Guance, Inc.

package main

import "gitlab.jiagouyun.com/cloudcare-tools/datakit/internal/plugins/inputs"

//nolint:lll
func (i *Input) Dashboard(lang inputs.I18n) map[string]string {
	switch lang {
	case inputs.I18nZh:
		return map[string]string{`

	outLine += fmt.Sprintln(lines)

	for _, key := range res {
		tran := getTranslate(key, true)
		outLine += fmt.Sprintf("\"%s\":\"%s\",\n", key, tran)
	}

	lines = `}
	case inputs.I18nEn:
		return map[string]string{`

	outLine += fmt.Sprintln(lines)

	for _, key := range res {
		tran := getTranslate(key, false)
		outLine += fmt.Sprintf("\"%s\":\"%s\",\n", key, tran)
	}

	lines = `}
	default:
		return nil
	}
}

func (i *Input) DashboardList() []string {
	return nil
}
`

	outLine += fmt.Sprintln(lines)

	if err := os.WriteFile(outFile, []byte(outLine), 0666); err != nil {
		panic(err)
	}

}

func getWord(str string) string {
	s1 := strings.Split(str, "\"{{.Dashboard.")

	if len(s1) == 1 {
		return ""
	}

	s2 := strings.Split(s1[1], "}}\"")
	if len(s2) == 1 {
		return ""
	}

	return s2[0]

}

func getTranslate(key string, isZh bool) string {
	for _, v := range translate {
		if key == v[0] {
			if isZh {
				return v[2]
			} else {
				return v[1]
			}
		}
	}

	return "################"
	panic(fmt.Sprint("not this key", key))
}

func convSlice2Map() {
	lines := `package main

var newMap = map[string]([2]string){
`
	outLine += lines

	newMap := make(map[string]([2]string))
	for _, v := range translate {
		newMap[v[0]] = [2]string{v[1], v[2]}
		lines := fmt.Sprintf("\"%s\": [2]string{\n", v[0])
		outLine += lines

		lines = fmt.Sprintf("\"%s\",\n", v[1])
		outLine += lines

		lines = fmt.Sprintf("\"%s\",\n},\n", v[2])
		outLine += lines
	}

	outLine += "}\n"

	if err := os.WriteFile(outFile, []byte(outLine), 0666); err != nil {
		panic(err)
	}

	os.Exit(0)
}
